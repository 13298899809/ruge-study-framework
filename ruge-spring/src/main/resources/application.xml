<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean class="com.ruge.spring5.basic.Person"></bean>
    <bean id="person" class="com.ruge.spring5.basic.Person"></bean>
    <bean id="person1" class="com.ruge.spring5.basic.Person"></bean>
    <bean id="person2" class="com.ruge.spring5.basic.Person"></bean>
    <bean id="person3" class="com.ruge.spring5.basic.Person"></bean>
    <bean name="p,p1,p2" class="com.ruge.spring5.basic.Person"></bean>


    <!--复杂对象 注入-->
    <!--FactoryBean接口-->
    <!--<bean id="connection" class="com.ruge.spring5.factoryBean.ConnectionFactoryBean"></bean>-->

    <!--实例工厂-->
    <!--
    <bean id="connection" class="com.ruge.spring5.factoryBean.ConnectionFactory"></bean>
     <bean factory-bean="connection" factory-method="getConnection"></bean>
     -->

    <!--静态工厂-->
    <bean id="connection" class="com.ruge.spring5.factoryBean.StaticConnectionFactory"
          factory-method="getConnection"></bean>

    <!--测试scope-->
    <bean id="account1" class="com.ruge.spring5.scope.Account" scope="singleton"></bean>
    <bean id="account2" class="com.ruge.spring5.scope.Account" scope="prototype"></bean>

    <!--test life-->
    <!--工厂创建的同时  bean也创建-->
    <!--如果想单例  同时只想在获取的时候进行对象的创建-->
    <bean id="product1" class="com.ruge.spring5.life.Product1" scope="singleton"></bean>
    <!--spring工厂会在获取对象的同事创建对象-->
    <bean id="product2" class="com.ruge.spring5.life.Product2" scope="prototype"></bean>
    <!--如果 scope="singleton"  同时只想在获取的时候进行对象的创建  lazy-init="true"-->
    <bean id="product3" class="com.ruge.spring5.life.Product3" scope="singleton" lazy-init="true"></bean>

    <!--生命周期 ~~~创建~~~-->
    <!--生命周期 创建完对象后会调用afterPropertiesSet()方法  进行一些初始化操作-->
    <!--生命周期 创建完对象后会调用destroy()方法  进行一些销毁操作-->
    <bean id="product4" class="com.ruge.spring5.life.Product4"></bean>
    <!--生命周期 创建完对象后会调用init()方法  进行一些初始化操作-->
    <!--生命周期 销毁后对象后会调用destory()方法  进行一些初始化操作-->
    <bean id="product5" class="com.ruge.spring5.life.Product5" init-method="init" destroy-method="destory"></bean>

</beans>